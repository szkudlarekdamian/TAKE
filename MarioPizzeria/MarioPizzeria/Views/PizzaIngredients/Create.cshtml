@model MarioPizzeria.Models.PizzaIngredient

@{
    ViewData["Title"] = "Create";
}
@foreach (var item in ViewContext.ViewData.ModelState)
{
    if (item.Value.Errors.Any())
    {
        <tr>
            <td><b style="color:red">@item.Key</b></td>
            <td>@((item.Value != null || item.Value.RawValue != null) ? "" : item.Value.RawValue)</td>
            <td>@(string.Join("; ", item.Value.Errors.Select(x => x.ErrorMessage)))</td>
        </tr>
    }
}

<h1>Create</h1>

<h4>PizzaIngredient</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="PizzaId" class="control-label"></label>
                <select asp-for="PizzaId" class="form-control" asp-items="ViewBag.PizzaId" readonly="readonly"></select>
            </div>
            <div class="form-group">
                <label asp-for="IngredientId" class="control-label"></label>
                <select asp-for="IngredientId" class="form-control" asp-items="ViewBag.IngredientId"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-success" />
            </div>
        </form>
    </div>
</div>

<div>
    <button type="button" class="btn btn-info" onclick="location.href='@Url.Action("Index", "Pizzas")'">Back to list</button>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
